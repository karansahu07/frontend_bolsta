<div className="overflow-x-auto">
        <table className="min-w-full bg-white border border-gray-200">
          <thead>
            <tr className="bg-gray-800 text-white">
              <th className="px-4 py-3 text-left text-sm font-medium cursor-pointer" onClick={() => handleSort('companyName')}>
                <div className="flex items-center">
                  Company Name
                  {sortField === 'companyName' && (
                    <ChevronDown size={16} className={`ml-1 ${sortDirection === 'desc' ? 'transform rotate-180' : ''}`} />
                  )}
                </div>
              </th>
              <th className="px-4 py-3 text-left text-sm font-medium cursor-pointer" onClick={() => handleSort('primaryAdmin')}>
                <div className="flex items-center">
                  Primary Admin Name
                  {sortField === 'primaryAdmin' && (
                    <ChevronDown size={16} className={`ml-1 ${sortDirection === 'desc' ? 'transform rotate-180' : ''}`} />
                  )}
                </div>
              </th>
              <th className="px-4 py-3 text-left text-sm font-medium cursor-pointer" onClick={() => handleSort('adminEmail')}>
                <div className="flex items-center">
                  Primary Admin Email
                  {sortField === 'adminEmail' && (
                    <ChevronDown size={16} className={`ml-1 ${sortDirection === 'desc' ? 'transform rotate-180' : ''}`} />
                  )}
                </div>
              </th>
              <th className="px-4 py-3 text-left text-sm font-medium cursor-pointer" onClick={() => handleSort('noOfSubscribers')}>
                <div className="flex items-center">
                  No. Of Subscribers/Tokens
                  {sortField === 'noOfSubscribers' && (
                    <ChevronDown size={16} className={`ml-1 ${sortDirection === 'desc' ? 'transform rotate-180' : ''}`} />
                  )}
                </div>
              </th>
              <th className="px-4 py-3 text-left text-sm font-medium cursor-pointer" onClick={() => handleSort('videoPerSubscribers')}>
                <div className="flex items-center">
                  Video per Subscribers
                  {sortField === 'videoPerSubscribers' && (
                    <ChevronDown size={16} className={`ml-1 ${sortDirection === 'desc' ? 'transform rotate-180' : ''}`} />
                  )}
                </div>
              </th>
              <th className="px-4 py-3 text-left text-sm font-medium cursor-pointer" onClick={() => handleSort('planExpiryDate')}>
                <div className="flex items-center">
                  Plan Type monthly/annual
                  {sortField === 'planExpiryDate' && (
                    <ChevronDown size={16} className={`ml-1 ${sortDirection === 'desc' ? 'transform rotate-180' : ''}`} />
                  )}
                </div>
              </th>
              <th className="px-4 py-3 text-center text-sm font-medium">Actions</th>
            </tr>
          </thead>
          <tbody className="divide-y divide-gray-200">
            {filteredData.length > 0 ? (
              filteredData.map((company, index) => (
                <tr key={company.id} className={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                  <td className="px-4 py-4 text-sm text-gray-700">{company.companyName}</td>
                  <td className="px-4 py-4 text-sm text-gray-700">{company.primaryAdmin}</td>
                  <td className="px-4 py-4 text-sm text-gray-700">{company.adminEmail}</td>
                  <td className="px-4 py-4 text-sm text-gray-700">{company.noOfSubscribers}</td>
                  <td className="px-4 py-4 text-sm text-gray-700">{company.videoPerSubscribers}</td>
                  <td className="px-4 py-4 text-sm text-gray-700">{company.planExpiryDate}</td>
                  <td className="px-4 py-4 text-sm text-gray-700">
                    <div className="flex justify-center space-x-3">
                      <button className="text-blue-600 hover:text-blue-800">
                        <Edit size={18} />
                      </button>
                      <button className="text-red-600 hover:text-red-800">
                        <Trash size={18} />
                      </button>
                      <button className="hover:bg-gray-100 p-1 rounded">
                        <ViewDetailsIcon />
                      </button>
                    </div>
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan="7" className="px-4 py-4 text-sm text-center text-gray-500">
                  No companies found
                </td>
              </tr>
            )}
            
            {/* Empty rows to maintain table height */}
            {Array.from({ length: Math.max(0, 10 - filteredData.length) }).map((_, index) => (
              <tr key={`empty-${index}`} className={`h-14 ${(filteredData.length + index) % 2 === 0 ? 'bg-white' : 'bg-gray-50'}`}>
                <td colSpan="7" className="px-4 py-4"></td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Pagination */}
      <div className="flex flex-col sm:flex-row justify-between items-center mt-6">
        <button 
          className="bg-gray-800 text-white px-4 py-2 rounded-md flex items-center mb-4 sm:mb-0" 
          onClick={() => handlePageChange(currentPage - 1)}
          disabled={currentPage === 1}
        >
          <ArrowLeft size={16} className="mr-2" />
          NEXT PREV
        </button>
        
        <div className="flex items-center">
          {generatePaginationNumbers().map((page, index) => (
            <button
              key={index}
              onClick={() => typeof page === 'number' ? handlePageChange(page) : null}
              className={`w-8 h-8 mx-1 flex items-center justify-center rounded-md ${
                page === currentPage
                  ? 'bg-gray-800 text-white'
                  : 'text-gray-700 hover:bg-gray-100'
              } ${typeof page !== 'number' ? 'cursor-default' : ''}`}
            >
              {page}
            </button>
          ))}
        </div>
        
        <button 
          className="bg-gray-800 text-white px-4 py-2 rounded-md flex items-center mt-4 sm:mt-0" 
          onClick={() => handlePageChange(currentPage + 1)}
          disabled={currentPage === totalPages}
        >
          NEXT PAGE
          <ArrowRight size={16} className="ml-2" />
        </button>
      </div>